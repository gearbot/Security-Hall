# Security Hall of Fame Azure build pipeline
trigger:
- master


variables:
- group: DiscordWebhook-DeploymentMonitoring

stages:
- stage: Tests
  jobs: 
  - job: check_clippy
    displayName: Clippy

    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - template: ci/installrust.yml

    - script: rustup component add clippy
      displayName: Install Clippy

    - script: cargo clippy --all -- -D clippy::all
      displayName: Clippy Check
    
  - job: cargo_check
    displayName: Cargo Check
    dependsOn: check_clippy
    
    strategy:
      matrix:
        Windows Stable:
          imageName: 'vs2017-win2016'
          rustup_toolchain: stable
        Windows Nightly:
          imageName: 'vs2017-win2016'
          rustup_toolchain: nightly

        Linux Stable:
          imageName: 'ubuntu-latest'
          rustup_toolchain: stable
        Linux Nightly:
          imageName: 'ubuntu-latest'
          rustup_toolchain: nightly
      
    pool:
      vmImage: $(imageName)

    steps:
    - template: ci/installrust.yml
      parameters:
        rust_toolchain: $(rustup_toolchain)

    - script: cargo check --all --bins
      displayName: Cargo Check


- stage: Build
  dependsOn: Tests
  condition: succeeded()

  jobs:
  - job: build_release
    displayName: Build Release

    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - template: ci/installrust.yml

    - script: cargo rustc --release -- -C lto -C link-args=-s
      displayName: Release Compile

    # Artifacts are needed for the startup test, even on PRs
    - task: PublishPipelineArtifact@0
      condition: succeeded()
      inputs:
        artifactName: 'security_hall'
        targetPath: './target/release/security_hall'

  - job: startup_test
    displayName: Startup Test
    dependsOn: build_release
    condition: succeeded()

    pool:
      vmImage: 'ubuntu-latest'

    steps:
      - script: cp default_config.toml config.toml
        displayName: Create config

      - task: DownloadPipelineArtifact@1
        displayName: Download Binary
        inputs:
          buildType: 'current'
          artifactName: 'security_hall'
          targetPath: '$(System.DefaultWorkingDirectory)'

      - script: |
          chmod +x ./security_hall
          RESULTS=`./security_hall & last_pid=$!; sleep 5; kill -s TERM $last_pid`
          echo "##vso[task.setvariable variable=startupResult;]$RESULTS"
        displayName: Startup Panic Test
        
      - script: 'echo $(startupResult); exit 1'
        displayName: Startup failure
        condition: contains(variables['startupResult'], 'thread')

      - script: rm -rf config.toml ./records ./logs
        displayName: Clean repo contents

      - task: PublishPipelineArtifact@1
        displayName: Generate deploy files
        condition: succeeded()
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)'
          artifact: 'DeployFiles'


- stage: Deploy
  dependsOn: Build
  condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'))

  jobs:
    - deployment: deploy_to_vm
      displayName: Deploy to VM
      environment: Production

      pool:
        vmImage: 'ubuntu-latest'

      strategy:
        runOnce:
          deploy:
            steps:
            - task: DownloadPipelineArtifact@1
              displayName: Download deploy files
              inputs:
                buildType: 'current'
                artifactName: 'DeployFiles'
                targetPath: '$(System.DefaultWorkingDirectory)'
            
            - task: SSH@0
              displayName: Stop Service
              inputs:
                sshEndpoint: 'GearBox'
                runOptions: 'commands'
                commands: 'sudo systemctl stop securityhall.service'
            
            - task: CopyFilesOverSSH@0
              displayName: Copy deployment to VM
              inputs:
                sshEndpoint: 'GearBox'
                contents: '**'
                targetFolder: './security_hall/'
                failOnEmptySource: true

            - task: SSH@0
              displayName: Start Service
              inputs:
                sshEndpoint: 'GearBox'
                runOptions: 'commands'
                commands: 'chmod +x ./security_hall/security_hall; sudo systemctl start securityhall.service'
            
            # Notify admins via Discord of the deployment
            - template: ci/discordnotify.yml
